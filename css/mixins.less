// Mixins collections based on various stuff //

///////////////
// Gradients //
///////////////

.gradient-h (@startColor: #EEE, @endColor: #FFF) {
	background-color: @endColor;
	background-image: -webkit-gradient(linear, left center, right center, from(@startColor),to(@endColor));
	background-image: -webkit-linear-gradient(left, @startColor, @endColor);
	background-image:    -moz-linear-gradient(left, @startColor, @endColor);
	background-image:      -o-linear-gradient(left, @startColor, @endColor);
	background-image:         linear-gradient(left, @startColor, @endColor);
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(GradientType=1, StartColorStr='%d', EndColorStr='%d')", @startColor, @endColor));
}

.gradient-v (@startColor: #EEE, @endColor: #FFF) {
    background-color: mix(@startColor, @endColor, 60%);
    background-image: -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
    background-image: -webkit-linear-gradient(top, @startColor, @endColor);
    background-image:    -moz-linear-gradient(top, @startColor, @endColor);
    background-image:      -o-linear-gradient(top, @startColor, @endColor);
    background-image:         linear-gradient(top, @startColor, @endColor);
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(GradientType=0, StartColorStr='%d', EndColorStr='%d')", @startColor, @endColor));
}

.gradient-vline (@startColor: #B0BAC5, @middleColor1: #9DA7B2, @middleColor2: #919CA8, @endColor: #7E8A98) {
    background: mix(@middleColor1, @middleColor2, 50%);
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, @startColor), color-stop(50%, @middleColor1), color-stop(51%, @middleColor2), color-stop(100%, @endColor));
    background-image: -webkit-linear-gradient(top, @startColor 0%, @middleColor1 50%, @middleColor2 51%, @endColor 100%);
    background-image:    -moz-linear-gradient(top, @startColor 0%, @middleColor1 50%, @middleColor2 51%, @endColor 100%);
    background-image:      -o-linear-gradient(top, @startColor 0%, @middleColor1 50%, @middleColor2 51%, @endColor 100%);
    background-image:         linear-gradient(top, @startColor 0%, @middleColor1 50%, @middleColor2 51%, @endColor 100%);
}

.gradient-v3colors (@startColor: #00b3ee, @middleColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f) {
    background-color: mix(@middleColor, @endColor, 80%);
    background-image: -webkit-gradient(linear, left top, left bottom, from(@startColor), color-stop(@colorStop, @middleColor), to(@endColor));
    background-image: -webkit-linear-gradient(@startColor, @middleColor @colorStop, @endColor);
    background-image:    -moz-linear-gradient(top, @startColor, @middleColor @colorStop, @endColor);
    background-image:      -o-linear-gradient(@startColor, @middleColor @colorStop, @endColor);
    background-image:         linear-gradient(@startColor, @middleColor @colorStop, @endColor);
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr='%d', endColorstr='%d')", @startColor, @endColor));
}

.gradient-radial (@innerColor: #EEE, @outerColor: #FFF) {
	background-color: @outerColor;
	background-image: -webkit-gradient(radial, 50% 50%, 200, 50% 50%, 20, from(@outerColor), to(@innerColor));
	background-image: -webkit-radial-gradient(50% 50%, @innerColor, @outerColor);
	background-image:    -moz-radial-gradient(50% 50%, @innerColor, @outerColor);
	background-image:      -o-radial-gradient(50% 50%, @innerColor, @outerColor);
	background-image:         radial-gradient(50% 50%, @innerColor, @outerColor);
}

.gradient-direction (@startColor: #555, @endColor: #333, @degrees: 45) {
	background: @endColor;
	background-image: -webkit-gradient(linear, ~"@{degrees}deg", from(@startColor), to(@endColor));
	background-image: -webkit-linear-gradient(~"@{degrees}deg", @startColor, @endColor);
	background-image:    -moz-linear-gradient(~"@{degrees}deg", @startColor, @endColor);
	background-image:      -o-linear-gradient(~"@{degrees}deg", @startColor, @endColor);
	background-image:         linear-gradient(~"@{degrees}deg", @startColor, @endColor);
}

//////////////////
// CSS3 Helpers //
//////////////////

.background-clip (@type: border-box) when (@type = border-box), (@type = padding-box), (@type = content-box) {
    -webkit-background-clip: @type;
	background-clip: @type;
}

.background-size (@value) {
	-webkit-background-size: @value;
	background-size: @value;
}

.box-sizing (@type: border-box) { 
	-webkit-box-sizing: @type;
	-moz-box-sizing: @type;
	box-sizing: @type;
}

.border-image (@source: none, @values: 30 30 repeat) {
	-webkit-border-image: e(%("url('%d')", ~"@{source}")) @values;
	-moz-border-image: e(%("url('%d')", ~"@{source}")) @values;
	-o-border-image: e(%("url('%d')", ~"@{source}")) @values;
	border-image: e(%("url('%d')", ~"@{source}")) @values;
}

// Border radius style mixins - similar to css3 specs
.border-radius (@radius: 5px) {
    -webkit-border-radius: @radius;
	border-radius: @radius;
}

.border-top-left-radius (@value: 5) {
    -webkit-border-top-left-radius: @value * 1px;
	border-top-left-radius: @value * 1px;
}

.border-top-right-radius (@value: 5) {
    -webkit-border-top-right-radius: @value * 1px;
	border-top-right-radius: @value * 1px;
}

.border-bottom-left-radius (@value: 5) {
	-webkit-border-bottom-left-radius: @value * 1px;
	border-bottom-left-radius: @value * 1px;
}

.border-bottom-right-radius (@value: 5) {
	-webkit-border-bottom-right-radius: @value * 1px;
	border-bottom-right-radius: @value * 1px;
}

// Rounded helper
.rounded (@radius: 5px) {
    -webkit-border-radius: @radius;
	border-radius: @radius;
}

.rounded (top, @value: 5) {
    -webkit-border-top-left-radius: @value * 1px;
	border-top-left-radius: @value * 1px;

    -webkit-border-top-right-radius: @value * 1px;
	border-top-right-radius: @value * 1px;
}

.rounded (right, @value: 5) {
    -webkit-border-top-right-radius: @value * 1px;
	border-top-right-radius: @value * 1px;

    -webkit-border-bottom-right-radius: @value * 1px;
	border-bottom-right-radius: @value * 1px;
}

.rounded (bottom, @value: 5) {
    -webkit-border-bottom-right-radius: @value * 1px;
	border-bottom-right-radius: @value * 1px;

    -webkit-border-bottom-left-radius: @value * 1px;
	border-bottom-left-radius: @value * 1px;
}

.rounded (left, @value: 5) {
    -webkit-border-top-left-radius: @value * 1px;
	border-top-left-radius: @value * 1px;

    -webkit-border-bottom-left-radius: @value * 1px;
	border-bottom-left-radius: @value * 1px;
}

.transform (@options) { 
	-webkit-transform: @options;
	-moz-transform: @options;
	-ms-transform: @options;
	-o-transform: @options;
	transform: @options;
}

.matrix (@rotate: 0.86, @scale: 0.5, @translate: -0.5, @skew: 0.86, @x: 0, @y: 0) {
	-webkit-transform: matrix(@rotate, @scale, @translate, @skew, @x, @y);
	-moz-transform: matrix(@rotate, @scale, @translate, @skew, @x, @y);
	-ms-transform: matrix(@rotate, @scale, @translate, @skew, @x, @y);
	-o-transform: matrix(@rotate, @scale, @translate, @skew, @x, @y);
	transform: matrix(@rotate, @scale, @translate, @skew, @x, @y);

	filter: e(%("progid:DXImageTransform.Microsoft.Matrix(M11=%d, M12=%d, M21=%d, M22=%d, sizingMethod='auto expand')", @rotate, @scale, @translate, @skew));
}

.matrix3d (@values: "1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1") {
	-webkit-transform: matrix3d(e(@values));
	-moz-transform: matrix3d(e(@values));
	-ms-transform: matrix3d(e(@values));
	-o-transform: matrix3d(e(@values));
	transform: matrix3d(e(@values));
}

.rotate (@degrees: 5) {
	-webkit-transform: rotate(~"@{degrees}deg");
	-moz-transform: rotate(~"@{degrees}deg");
	-ms-transform: rotate(~"@{degrees}deg");
	-o-transform: rotate(~"@{degrees}deg");
	transform: rotate(~"@{degrees}deg");
}

.rotate3d (@x: 0, @y: 0, @z: 0, @degrees: 120) {
	-webkit-transform: rotate3d(@x, @y, @z, ~"@{degrees}deg");
	-moz-transform: rotate3d(@x, @y, @z, ~"@{degrees}deg");
	-ms-transform: rotate3d(@x, @y, @z, ~"@{degrees}deg");
	-o-transform: rotate3d(@x, @y, @z, ~"@{degrees}deg");
	transform: rotate3d(@x, @y, @z, ~"@{degrees}deg");
}

.rotate (@axis, @degrees: 120) when (@axis = x) {
	-webkit-transform: e(%('rotateX(%d)', ~"@{degrees}deg"));
	-moz-transform: e(%('rotateX(%d)', ~"@{degrees}deg"));
	-ms-transform: e(%('rotateX(%d)', ~"@{degrees}deg"));
	-o-transform: e(%('rotateX(%d)', ~"@{degrees}deg"));
	transform: e(%('rotateX(%d)', ~"@{degrees}deg"));
}

.rotate (@axis, @degrees: 10) when (@axis = y) {
	-webkit-transform: e(%('rotateY(%d)', ~"@{degrees}deg"));
	-moz-transform: e(%('rotateY(%d)', ~"@{degrees}deg"));
	-ms-transform: e(%('rotateY(%d)', ~"@{degrees}deg"));
	-o-transform: e(%('rotateY(%d)', ~"@{degrees}deg"));
	transform: e(%('rotateY(%d)', ~"@{degrees}deg"));
}

.rotate (@axis, @degrees: 10) when (@axis = z) {
	-webkit-transform: e(%('rotateZ(%d)', ~"@{degrees}deg"));
	-moz-transform: e(%('rotateZ(%d)', ~"@{degrees}deg"));
	-ms-transform: e(%('rotateZ(%d)', ~"@{degrees}deg"));
	-o-transform: e(%('rotateZ(%d)', ~"@{degrees}deg"));
	transform: e(%('rotateZ(%d)', ~"@{degrees}deg"));
}

.scale (@ratio: 1) {
	-webkit-transform: scale(@ratio);
	-moz-transform: scale(@ratio);
	-ms-transform: scale(@ratio);
	-o-transform: scale(@ratio);
	transform: scale(@ratio);
}

.scale3d (@x: 1, @y: 1, @z: 1) {
	-webkit-transform: scale3d(@x, @y, @z);
	-moz-transform: scale3d(@x, @y, @z);
	-ms-transform: scale3d(@x, @y, @z);
	transform: scale3d(@x, @y, @z);
}

.scale (@axis, @value: 1) when (@axis = x) {
	-webkit-transform: e(%('scaleX(%d)', @value));
	-moz-transform: e(%('scaleX(%d)', @value));
	-ms-transform: e(%('scaleX(%d)', @value));
	-o-transform: e(%('scaleX(%d)', @value));
	transform: e(%('scaleX(%d)', @value));
}

.scale (@axis, @value: 1) when (@axis = y) {
	-webkit-transform: e(%('scaleY(%d)', @value));
	-moz-transform: e(%('scaleY(%d)', @value));
	-ms-transform: e(%('scaleY(%d)', @value));
	-o-transform: e(%('scaleY(%d)', @value));
	transform: e(%('scaleY(%d)', @value));
}

.scale (@axis, @value: 1) when (@axis = z) {
	-webkit-transform: e(%('scaleZ(%d)', @value));
	-moz-transform: e(%('scaleZ(%d)', @value));
	-ms-transform: e(%('scaleZ(%d)', @value));
	-o-transform: e(%('scaleZ(%d)', @value));
	transform: e(%('scaleZ(%d)', @value));
}

.translate (@x: 0, @y: 0) when not (@x = x) and not (@x = y) and not (@x = z) {
	-webkit-transform: translate(@x * 1px, @y * 1px);
	-moz-transform: translate(@x * 1px, @y * 1px);
	-ms-transform: translate(@x * 1px, @y * 1px);
	-o-transform: translate(@x * 1px, @y * 1px);
	transform: translate(@x * 1px, @y * 1px);
}

.translate3d (@x: 0, @y: 0, @z: 0) {
	-webkit-transform: translate3d(@x * 1px, @y * 1px, @z * 1px);
	-moz-transform: translate3d(@x * 1px, @y * 1px, @z * 1px);
	-ms-transform: translate3d(@x * 1px, @y * 1px, @z * 1px);
	-o-transform: translate3d(@x * 1px, @y * 1px, @z * 1px);
	transform: translate3d(@x * 1px, @y * 1px, @z * 1px);
}

.translate (@axis, @x: 0) when (@axis = x) {
	-webkit-transform: e(%('translateX(%d)', @x * 1px));
	-moz-transform: e(%('translateX(%d)', @x * 1px));
	-ms-transform: e(%('translateX(%d)', @x * 1px));
	-o-transform: e(%('translateX(%d)', @x * 1px));
	transform: e(%('translateX(%d)', @x * 1px));
}

.translate (@axis, @y: 0) when (@axis = y) {
	-webkit-transform: e(%('translateY(%d)', @y * 1px));
	-moz-transform: e(%('translateY(%d)', @y * 1px));
	-ms-transform: e(%('translateY(%d)', @y * 1px));
	-o-transform: e(%('translateY(%d)', @y * 1px));
	transform: e(%('translateY(%d)', @y * 1px));
}

.translate (@axis, @z: 0) when (@axis = z) {
	-webkit-transform: e(%('translateZ(%d)', @z * 1px));
	-moz-transform: e(%('translateZ(%d)', @z * 1px));
	-ms-transform: e(%('translateZ(%d)', @z * 1px));
	-o-transform: e(%('translateZ(%d)', @z * 1px));
	transform: e(%('translateZ(%d)', @z * 1px));
}

.skew (@degrees-x: 20, @degrees-y: 20) when not (@degrees-x = x) and not (@degrees-x = y) {
	-webkit-transform: skew(~"@{degrees-x}deg", ~"@{degrees-y}deg");
	-moz-transform: skew(~"@{degrees-x}deg", ~"@{degrees-y}deg");
	-ms-transform: skew(~"@{degrees-x}deg", ~"@{degrees-y}deg");
	-o-transform: skew(~"@{degrees-x}deg", ~"@{degrees-y}deg");
	transform: skew(~"@{degrees-x}deg", ~"@{degrees-y}deg");
}

.skew (@axis, @degrees-x: 20) when (@axis = x) {
	-webkit-transform: e(%('skewX(%d)', ~"@{degrees-x}deg"));
	-moz-transform: e(%('skewX(%d)', ~"@{degrees-x}deg"));
	-ms-transform: e(%('skewX(%d)', ~"@{degrees-x}deg"));
	-o-transform: e(%('skewX(%d)', ~"@{degrees-x}deg"));
	transform: e(%('skewX(%d)', ~"@{degrees-x}deg"));
}

.skew (@axis, @degrees-y: 20) when (@axis = y) {
	-webkit-transform: e(%('skewY(%d)', ~"@{degrees-y}deg"));
	-moz-transform: e(%('skewY(%d)', ~"@{degrees-y}deg"));
	-ms-transform: e(%('skewY(%d)', ~"@{degrees-y}deg"));
	-o-transform: e(%('skewY(%d)', ~"@{degrees-y}deg"));
	transform: e(%('skewy(%d)', ~"@{degrees-y}deg"));
}

.perspective (@value: none, @unit: px) {
	-webkit-perspective: @value;
	-moz-perspective: ~"@{value}@{unit}";
	-ms-perspective: @value;
	perspective: @value;
}

.perspective-origin (@values: 50% 50%) {
	-webkit-perspective-origin: @values;
	-moz-perspective-origin: @values;
	-ms-perspective-origin: @values;
	perspective-origin: @values;
}

.transform-origin (@x: 50%, @y: 50%, @z: 0) {
	-webkit-transform-origin: @arguments;
	-moz-transform-origin: @arguments;
	-ms-transform-origin: @arguments;
	-o-transform-origin: @arguments;
	transform-origin: @arguments;
}

.transform-style (@value: flat) {
	-webkit-transform-style: @value;   
	-moz-transform-style: @value;
	-ms-transform-style: @value;
	transform-style: @value; 
}

.transition (@property: property, @duration: 0.2s, @timing: ease-out, @delay: 0) {
	-webkit-transition: @arguments;
	-moz-transition: @property @duration @timing ~"@{delay}s";
	-o-transition: @arguments;
	transition: @arguments;
}

.animate (@name: none, @duration: 2s, @timing: ease, @delay: 0, @iteration-count: 1, @direction: normal) {
	-webkit-animation: @name @duration @timing @delay @iteration-count @direction;
	-moz-animation: @name @duration @timing ~"@{delay}s" @iteration-count @direction;
	-o-animation: @name @duration @timing @delay @iteration-count @direction;
}

.animation-state (@state: running) {
	-webkit-animation-play-state: @state;
	-moz-animation-play-state: @state;
	animation-play-state: @state;
}

.columns (@columnCount: auto, @columnGap: normal) {
	-webkit-columns: @columnCount;
	-moz-columns: @columnCount;
	-ms-columns: @columnCount;
	columns: @columnCount;

	-webkit-column-gap: @columnGap;
	-moz-column-gap: @columnGap;
	-ms-column-gap: @columnGap;
	column-gap: @columnGap;
}

.column-count(@columnCount: auto) {
	-webkit-column-count: @columnCount;
	-moz-column-count: @columnCount;
	column-count: @columnCount;
}

.column-gap(@columnGap: normal) {
	-webkit-column-gap: @columnGap;
	-moz-column-gap: @columnGap;
	-ms-column-gap: @columnGap;
	column-gap: @columnGap;
}

////////////////////
// Shadow helpers //
////////////////////

.text-shadow (@string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
	text-shadow: @string;
}
.box-shadow (@string) {
	-webkit-box-shadow: @string;
	-moz-box-shadow:    @string;
	box-shadow:         @string;
}
.drop-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
	-webkit-box-shadow:	@x @y @blur @spread rgba(0, 0, 0, @alpha);
	-moz-box-shadow:	@x @y @blur @spread rgba(0, 0, 0, @alpha);
	box-shadow:		@x @y @blur @spread rgba(0, 0, 0, @alpha);
}
.inner-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
	-webkit-box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
	-moz-box-shadow:    inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
	box-shadow:         inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
}

////////////////////////////
// Vertical align helpers //
////////////////////////////

//@link http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
.vertical-align() {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-moz-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

//apply this to parent of vertical-align if text is blurry
.preserve-3d() {
	-webkit-transform-style: preserve-3d;
	-moz-transform-style: preserve-3d;
	-ms-transform-style: preserve-3d;
	transform-style: preserve-3d;
}

// This parent can be any width and height
.centered-container() {
	text-align: center;
}

// The ghost, nudged to maintain perfect centering
.centered-container:before {
	content: '';
	display: inline-block;
	height: 100%;
	vertical-align: middle;
	margin-right: -0.25em; //adjust for spacing
}

/////////////
// Helpers //
/////////////

.opacity (@opacity: 0.5) when (isnumber(@opacity)) and not (@opacity < 0) and not (@opacity > 1) {
	zoom: 1;
	opacity: @opacity;
	filter: e(%("alpha(opacity=%d)", @opacity*100));
}

.centered-element() {
	display: inline-block;
	vertical-align: middle;
}

.size (@width: 400, @height: 200) {
	width: @width * 1px;
	height: @height * 1px;
}

.square (@value: 100) {
	.size(@value, @value);
}

.hide-text() {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}

// Hide from both screenreaders and browsers: h5bp.com/u
.hidden () {
	display: none !important; visibility: hidden;
}

// Hide only visually, but have it available for screenreaders: h5bp.com/v
.visuallyhidden () {
	border: 0;clip: rect(0 0 0 0);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;
}

.resizable (@direction: both) {
	resize: @direction;
	overflow: auto;
}

.center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

.clearfix() {
	*zoom: 1;
	&:before,
		&:after {
		display: table;
		content: "";
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

//provided that you set html { font-size:62.5%}
.font-size(@size:1.6,@line:1.5) {
	@remValue: @size;
	@pxValue: (@size * 10);
	@remValueLine: @remValue * @line;
	@pxValueLine: @pxValue * @line;
	font-size: ~"@{pxValue}px"; 
	font-size: ~"@{remValue}rem";
	line-heigth: ~"@{pxValueLine}px"; 
	line-height: ~"@{remValueLine}rem";
}